/*
** Copyright (c) 2014-2017 The Khronos Group Inc.
** 
** Permission is hereby granted, free of charge, to any person obtaining a copy
** of this software and/or associated documentation files (the "Materials"),
** to deal in the Materials without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Materials, and to permit persons to whom the
** Materials are furnished to do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Materials.
** 
** MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS
** STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND
** HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/ 
** 
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS
** IN THE MATERIALS.
*/

#ifndef spirv_strings_HPP
#define spirv_strings_HPP

#include "spirv.hpp11"

#ifndef SPIRV_DEF
#   ifdef SPIRV_STRINGS_IMPLEMENT
#       define SPIRV_DEF
#   else
#       define SPIRV_DEF extern
#   endif
#endif

namespace spv {

SPIRV_DEF const char* SourceLanguageToString(SourceLanguage e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case SourceLanguage::Unknown: return "Unknown";
        case SourceLanguage::ESSL: return "ESSL";
        case SourceLanguage::GLSL: return "GLSL";
        case SourceLanguage::OpenCL_C: return "OpenCL_C";
        case SourceLanguage::OpenCL_CPP: return "OpenCL_CPP";
        case SourceLanguage::HLSL: return "HLSL";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ExecutionModelToString(ExecutionModel e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case ExecutionModel::Vertex: return "Vertex";
        case ExecutionModel::TessellationControl: return "TessellationControl";
        case ExecutionModel::TessellationEvaluation: return "TessellationEvaluation";
        case ExecutionModel::Geometry: return "Geometry";
        case ExecutionModel::Fragment: return "Fragment";
        case ExecutionModel::GLCompute: return "GLCompute";
        case ExecutionModel::Kernel: return "Kernel";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* AddressingModelToString(AddressingModel e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case AddressingModel::Logical: return "Logical";
        case AddressingModel::Physical32: return "Physical32";
        case AddressingModel::Physical64: return "Physical64";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* MemoryModelToString(MemoryModel e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case MemoryModel::Simple: return "Simple";
        case MemoryModel::GLSL450: return "GLSL450";
        case MemoryModel::OpenCL: return "OpenCL";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ExecutionModeToString(ExecutionMode e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case ExecutionMode::Invocations: return "Invocations";
        case ExecutionMode::SpacingEqual: return "SpacingEqual";
        case ExecutionMode::SpacingFractionalEven: return "SpacingFractionalEven";
        case ExecutionMode::SpacingFractionalOdd: return "SpacingFractionalOdd";
        case ExecutionMode::VertexOrderCw: return "VertexOrderCw";
        case ExecutionMode::VertexOrderCcw: return "VertexOrderCcw";
        case ExecutionMode::PixelCenterInteger: return "PixelCenterInteger";
        case ExecutionMode::OriginUpperLeft: return "OriginUpperLeft";
        case ExecutionMode::OriginLowerLeft: return "OriginLowerLeft";
        case ExecutionMode::EarlyFragmentTests: return "EarlyFragmentTests";
        case ExecutionMode::PointMode: return "PointMode";
        case ExecutionMode::Xfb: return "Xfb";
        case ExecutionMode::DepthReplacing: return "DepthReplacing";
        case ExecutionMode::DepthGreater: return "DepthGreater";
        case ExecutionMode::DepthLess: return "DepthLess";
        case ExecutionMode::DepthUnchanged: return "DepthUnchanged";
        case ExecutionMode::LocalSize: return "LocalSize";
        case ExecutionMode::LocalSizeHint: return "LocalSizeHint";
        case ExecutionMode::InputPoints: return "InputPoints";
        case ExecutionMode::InputLines: return "InputLines";
        case ExecutionMode::InputLinesAdjacency: return "InputLinesAdjacency";
        case ExecutionMode::Triangles: return "Triangles";
        case ExecutionMode::InputTrianglesAdjacency: return "InputTrianglesAdjacency";
        case ExecutionMode::Quads: return "Quads";
        case ExecutionMode::Isolines: return "Isolines";
        case ExecutionMode::OutputVertices: return "OutputVertices";
        case ExecutionMode::OutputPoints: return "OutputPoints";
        case ExecutionMode::OutputLineStrip: return "OutputLineStrip";
        case ExecutionMode::OutputTriangleStrip: return "OutputTriangleStrip";
        case ExecutionMode::VecTypeHint: return "VecTypeHint";
        case ExecutionMode::ContractionOff: return "ContractionOff";
        case ExecutionMode::Initializer: return "Initializer";
        case ExecutionMode::Finalizer: return "Finalizer";
        case ExecutionMode::SubgroupSize: return "SubgroupSize";
        case ExecutionMode::SubgroupsPerWorkgroup: return "SubgroupsPerWorkgroup";
        case ExecutionMode::SubgroupsPerWorkgroupId: return "SubgroupsPerWorkgroupId";
        case ExecutionMode::LocalSizeId: return "LocalSizeId";
        case ExecutionMode::LocalSizeHintId: return "LocalSizeHintId";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* StorageClassToString(StorageClass e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case StorageClass::UniformConstant: return "UniformConstant";
        case StorageClass::Input: return "Input";
        case StorageClass::Uniform: return "Uniform";
        case StorageClass::Output: return "Output";
        case StorageClass::Workgroup: return "Workgroup";
        case StorageClass::CrossWorkgroup: return "CrossWorkgroup";
        case StorageClass::Private: return "Private";
        case StorageClass::Function: return "Function";
        case StorageClass::Generic: return "Generic";
        case StorageClass::PushConstant: return "PushConstant";
        case StorageClass::AtomicCounter: return "AtomicCounter";
        case StorageClass::Image: return "Image";
        case StorageClass::StorageBuffer: return "StorageBuffer";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* DimToString(Dim e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case Dim::Dim1D: return "1D";
        case Dim::Dim2D: return "2D";
        case Dim::Dim3D: return "3D";
        case Dim::Cube: return "Cube";
        case Dim::Rect: return "Rect";
        case Dim::Buffer: return "Buffer";
        case Dim::SubpassData: return "SubpassData";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* SamplerAddressingModeToString(SamplerAddressingMode e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case SamplerAddressingMode::None: return "None";
        case SamplerAddressingMode::ClampToEdge: return "ClampToEdge";
        case SamplerAddressingMode::Clamp: return "Clamp";
        case SamplerAddressingMode::Repeat: return "Repeat";
        case SamplerAddressingMode::RepeatMirrored: return "RepeatMirrored";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* SamplerFilterModeToString(SamplerFilterMode e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case SamplerFilterMode::Nearest: return "Nearest";
        case SamplerFilterMode::Linear: return "Linear";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ImageFormatToString(ImageFormat e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case ImageFormat::Unknown: return "Unknown";
        case ImageFormat::Rgba32f: return "Rgba32f";
        case ImageFormat::Rgba16f: return "Rgba16f";
        case ImageFormat::R32f: return "R32f";
        case ImageFormat::Rgba8: return "Rgba8";
        case ImageFormat::Rgba8Snorm: return "Rgba8Snorm";
        case ImageFormat::Rg32f: return "Rg32f";
        case ImageFormat::Rg16f: return "Rg16f";
        case ImageFormat::R11fG11fB10f: return "R11fG11fB10f";
        case ImageFormat::R16f: return "R16f";
        case ImageFormat::Rgba16: return "Rgba16";
        case ImageFormat::Rgb10A2: return "Rgb10A2";
        case ImageFormat::Rg16: return "Rg16";
        case ImageFormat::Rg8: return "Rg8";
        case ImageFormat::R16: return "R16";
        case ImageFormat::R8: return "R8";
        case ImageFormat::Rgba16Snorm: return "Rgba16Snorm";
        case ImageFormat::Rg16Snorm: return "Rg16Snorm";
        case ImageFormat::Rg8Snorm: return "Rg8Snorm";
        case ImageFormat::R16Snorm: return "R16Snorm";
        case ImageFormat::R8Snorm: return "R8Snorm";
        case ImageFormat::Rgba32i: return "Rgba32i";
        case ImageFormat::Rgba16i: return "Rgba16i";
        case ImageFormat::Rgba8i: return "Rgba8i";
        case ImageFormat::R32i: return "R32i";
        case ImageFormat::Rg32i: return "Rg32i";
        case ImageFormat::Rg16i: return "Rg16i";
        case ImageFormat::Rg8i: return "Rg8i";
        case ImageFormat::R16i: return "R16i";
        case ImageFormat::R8i: return "R8i";
        case ImageFormat::Rgba32ui: return "Rgba32ui";
        case ImageFormat::Rgba16ui: return "Rgba16ui";
        case ImageFormat::Rgba8ui: return "Rgba8ui";
        case ImageFormat::R32ui: return "R32ui";
        case ImageFormat::Rgb10a2ui: return "Rgb10a2ui";
        case ImageFormat::Rg32ui: return "Rg32ui";
        case ImageFormat::Rg16ui: return "Rg16ui";
        case ImageFormat::Rg8ui: return "Rg8ui";
        case ImageFormat::R16ui: return "R16ui";
        case ImageFormat::R8ui: return "R8ui";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ImageChannelOrderToString(ImageChannelOrder e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case ImageChannelOrder::R: return "R";
        case ImageChannelOrder::A: return "A";
        case ImageChannelOrder::RG: return "RG";
        case ImageChannelOrder::RA: return "RA";
        case ImageChannelOrder::RGB: return "RGB";
        case ImageChannelOrder::RGBA: return "RGBA";
        case ImageChannelOrder::BGRA: return "BGRA";
        case ImageChannelOrder::ARGB: return "ARGB";
        case ImageChannelOrder::Intensity: return "Intensity";
        case ImageChannelOrder::Luminance: return "Luminance";
        case ImageChannelOrder::Rx: return "Rx";
        case ImageChannelOrder::RGx: return "RGx";
        case ImageChannelOrder::RGBx: return "RGBx";
        case ImageChannelOrder::Depth: return "Depth";
        case ImageChannelOrder::DepthStencil: return "DepthStencil";
        case ImageChannelOrder::sRGB: return "sRGB";
        case ImageChannelOrder::sRGBx: return "sRGBx";
        case ImageChannelOrder::sRGBA: return "sRGBA";
        case ImageChannelOrder::sBGRA: return "sBGRA";
        case ImageChannelOrder::ABGR: return "ABGR";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ImageChannelDataTypeToString(ImageChannelDataType e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case ImageChannelDataType::SnormInt8: return "SnormInt8";
        case ImageChannelDataType::SnormInt16: return "SnormInt16";
        case ImageChannelDataType::UnormInt8: return "UnormInt8";
        case ImageChannelDataType::UnormInt16: return "UnormInt16";
        case ImageChannelDataType::UnormShort565: return "UnormShort565";
        case ImageChannelDataType::UnormShort555: return "UnormShort555";
        case ImageChannelDataType::UnormInt101010: return "UnormInt101010";
        case ImageChannelDataType::SignedInt8: return "SignedInt8";
        case ImageChannelDataType::SignedInt16: return "SignedInt16";
        case ImageChannelDataType::SignedInt32: return "SignedInt32";
        case ImageChannelDataType::UnsignedInt8: return "UnsignedInt8";
        case ImageChannelDataType::UnsignedInt16: return "UnsignedInt16";
        case ImageChannelDataType::UnsignedInt32: return "UnsignedInt32";
        case ImageChannelDataType::HalfFloat: return "HalfFloat";
        case ImageChannelDataType::Float: return "Float";
        case ImageChannelDataType::UnormInt24: return "UnormInt24";
        case ImageChannelDataType::UnormInt101010_2: return "UnormInt101010_2";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ImageOperandsShiftToString(ImageOperandsShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case ImageOperandsShift::Bias: return "Bias";
        case ImageOperandsShift::Lod: return "Lod";
        case ImageOperandsShift::Grad: return "Grad";
        case ImageOperandsShift::ConstOffset: return "ConstOffset";
        case ImageOperandsShift::Offset: return "Offset";
        case ImageOperandsShift::ConstOffsets: return "ConstOffsets";
        case ImageOperandsShift::Sample: return "Sample";
        case ImageOperandsShift::MinLod: return "MinLod";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ImageOperandsMaskToString(ImageOperandsMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case ImageOperandsMask::MaskNone: return "None";
        case ImageOperandsMask::Bias: return "Bias";
        case ImageOperandsMask::Lod: return "Lod";
        case ImageOperandsMask::Grad: return "Grad";
        case ImageOperandsMask::ConstOffset: return "ConstOffset";
        case ImageOperandsMask::Offset: return "Offset";
        case ImageOperandsMask::ConstOffsets: return "ConstOffsets";
        case ImageOperandsMask::Sample: return "Sample";
        case ImageOperandsMask::MinLod: return "MinLod";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* FPFastMathModeShiftToString(FPFastMathModeShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case FPFastMathModeShift::NotNaN: return "NotNaN";
        case FPFastMathModeShift::NotInf: return "NotInf";
        case FPFastMathModeShift::NSZ: return "NSZ";
        case FPFastMathModeShift::AllowRecip: return "AllowRecip";
        case FPFastMathModeShift::Fast: return "Fast";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* FPFastMathModeMaskToString(FPFastMathModeMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case FPFastMathModeMask::MaskNone: return "None";
        case FPFastMathModeMask::NotNaN: return "NotNaN";
        case FPFastMathModeMask::NotInf: return "NotInf";
        case FPFastMathModeMask::NSZ: return "NSZ";
        case FPFastMathModeMask::AllowRecip: return "AllowRecip";
        case FPFastMathModeMask::Fast: return "Fast";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* FPRoundingModeToString(FPRoundingMode e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case FPRoundingMode::RTE: return "RTE";
        case FPRoundingMode::RTZ: return "RTZ";
        case FPRoundingMode::RTP: return "RTP";
        case FPRoundingMode::RTN: return "RTN";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* LinkageTypeToString(LinkageType e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case LinkageType::Export: return "Export";
        case LinkageType::Import: return "Import";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* AccessQualifierToString(AccessQualifier e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case AccessQualifier::ReadOnly: return "ReadOnly";
        case AccessQualifier::WriteOnly: return "WriteOnly";
        case AccessQualifier::ReadWrite: return "ReadWrite";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* FunctionParameterAttributeToString(FunctionParameterAttribute e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case FunctionParameterAttribute::Zext: return "Zext";
        case FunctionParameterAttribute::Sext: return "Sext";
        case FunctionParameterAttribute::ByVal: return "ByVal";
        case FunctionParameterAttribute::Sret: return "Sret";
        case FunctionParameterAttribute::NoAlias: return "NoAlias";
        case FunctionParameterAttribute::NoCapture: return "NoCapture";
        case FunctionParameterAttribute::NoWrite: return "NoWrite";
        case FunctionParameterAttribute::NoReadWrite: return "NoReadWrite";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* DecorationToString(Decoration e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case Decoration::RelaxedPrecision: return "RelaxedPrecision";
        case Decoration::SpecId: return "SpecId";
        case Decoration::Block: return "Block";
        case Decoration::BufferBlock: return "BufferBlock";
        case Decoration::RowMajor: return "RowMajor";
        case Decoration::ColMajor: return "ColMajor";
        case Decoration::ArrayStride: return "ArrayStride";
        case Decoration::MatrixStride: return "MatrixStride";
        case Decoration::GLSLShared: return "GLSLShared";
        case Decoration::GLSLPacked: return "GLSLPacked";
        case Decoration::CPacked: return "CPacked";
        case Decoration::BuiltIn: return "BuiltIn";
        case Decoration::NoPerspective: return "NoPerspective";
        case Decoration::Flat: return "Flat";
        case Decoration::Patch: return "Patch";
        case Decoration::Centroid: return "Centroid";
        case Decoration::Sample: return "Sample";
        case Decoration::Invariant: return "Invariant";
        case Decoration::Restrict: return "Restrict";
        case Decoration::Aliased: return "Aliased";
        case Decoration::Volatile: return "Volatile";
        case Decoration::Constant: return "Constant";
        case Decoration::Coherent: return "Coherent";
        case Decoration::NonWritable: return "NonWritable";
        case Decoration::NonReadable: return "NonReadable";
        case Decoration::Uniform: return "Uniform";
        case Decoration::SaturatedConversion: return "SaturatedConversion";
        case Decoration::Stream: return "Stream";
        case Decoration::Location: return "Location";
        case Decoration::Component: return "Component";
        case Decoration::Index: return "Index";
        case Decoration::Binding: return "Binding";
        case Decoration::DescriptorSet: return "DescriptorSet";
        case Decoration::Offset: return "Offset";
        case Decoration::XfbBuffer: return "XfbBuffer";
        case Decoration::XfbStride: return "XfbStride";
        case Decoration::FuncParamAttr: return "FuncParamAttr";
        case Decoration::FPRoundingMode: return "FPRoundingMode";
        case Decoration::FPFastMathMode: return "FPFastMathMode";
        case Decoration::LinkageAttributes: return "LinkageAttributes";
        case Decoration::NoContraction: return "NoContraction";
        case Decoration::InputAttachmentIndex: return "InputAttachmentIndex";
        case Decoration::Alignment: return "Alignment";
        case Decoration::MaxByteOffset: return "MaxByteOffset";
        case Decoration::AlignmentId: return "AlignmentId";
        case Decoration::MaxByteOffsetId: return "MaxByteOffsetId";
        case Decoration::OverrideCoverageNV: return "OverrideCoverageNV";
        case Decoration::PassthroughNV: return "PassthroughNV";
        case Decoration::ViewportRelativeNV: return "ViewportRelativeNV";
        case Decoration::SecondaryViewportRelativeNV: return "SecondaryViewportRelativeNV";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* BuiltInToString(BuiltIn e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case BuiltIn::Position: return "Position";
        case BuiltIn::PointSize: return "PointSize";
        case BuiltIn::ClipDistance: return "ClipDistance";
        case BuiltIn::CullDistance: return "CullDistance";
        case BuiltIn::VertexId: return "VertexId";
        case BuiltIn::InstanceId: return "InstanceId";
        case BuiltIn::PrimitiveId: return "PrimitiveId";
        case BuiltIn::InvocationId: return "InvocationId";
        case BuiltIn::Layer: return "Layer";
        case BuiltIn::ViewportIndex: return "ViewportIndex";
        case BuiltIn::TessLevelOuter: return "TessLevelOuter";
        case BuiltIn::TessLevelInner: return "TessLevelInner";
        case BuiltIn::TessCoord: return "TessCoord";
        case BuiltIn::PatchVertices: return "PatchVertices";
        case BuiltIn::FragCoord: return "FragCoord";
        case BuiltIn::PointCoord: return "PointCoord";
        case BuiltIn::FrontFacing: return "FrontFacing";
        case BuiltIn::SampleId: return "SampleId";
        case BuiltIn::SamplePosition: return "SamplePosition";
        case BuiltIn::SampleMask: return "SampleMask";
        case BuiltIn::FragDepth: return "FragDepth";
        case BuiltIn::HelperInvocation: return "HelperInvocation";
        case BuiltIn::NumWorkgroups: return "NumWorkgroups";
        case BuiltIn::WorkgroupSize: return "WorkgroupSize";
        case BuiltIn::WorkgroupId: return "WorkgroupId";
        case BuiltIn::LocalInvocationId: return "LocalInvocationId";
        case BuiltIn::GlobalInvocationId: return "GlobalInvocationId";
        case BuiltIn::LocalInvocationIndex: return "LocalInvocationIndex";
        case BuiltIn::WorkDim: return "WorkDim";
        case BuiltIn::GlobalSize: return "GlobalSize";
        case BuiltIn::EnqueuedWorkgroupSize: return "EnqueuedWorkgroupSize";
        case BuiltIn::GlobalOffset: return "GlobalOffset";
        case BuiltIn::GlobalLinearId: return "GlobalLinearId";
        case BuiltIn::SubgroupSize: return "SubgroupSize";
        case BuiltIn::SubgroupMaxSize: return "SubgroupMaxSize";
        case BuiltIn::NumSubgroups: return "NumSubgroups";
        case BuiltIn::NumEnqueuedSubgroups: return "NumEnqueuedSubgroups";
        case BuiltIn::SubgroupId: return "SubgroupId";
        case BuiltIn::SubgroupLocalInvocationId: return "SubgroupLocalInvocationId";
        case BuiltIn::VertexIndex: return "VertexIndex";
        case BuiltIn::InstanceIndex: return "InstanceIndex";
        case BuiltIn::SubgroupEqMaskKHR: return "SubgroupEqMaskKHR";
        case BuiltIn::SubgroupGeMaskKHR: return "SubgroupGeMaskKHR";
        case BuiltIn::SubgroupGtMaskKHR: return "SubgroupGtMaskKHR";
        case BuiltIn::SubgroupLeMaskKHR: return "SubgroupLeMaskKHR";
        case BuiltIn::SubgroupLtMaskKHR: return "SubgroupLtMaskKHR";
        case BuiltIn::BaseVertex: return "BaseVertex";
        case BuiltIn::BaseInstance: return "BaseInstance";
        case BuiltIn::DrawIndex: return "DrawIndex";
        case BuiltIn::DeviceIndex: return "DeviceIndex";
        case BuiltIn::ViewIndex: return "ViewIndex";
        case BuiltIn::ViewportMaskNV: return "ViewportMaskNV";
        case BuiltIn::SecondaryPositionNV: return "SecondaryPositionNV";
        case BuiltIn::SecondaryViewportMaskNV: return "SecondaryViewportMaskNV";
        case BuiltIn::PositionPerViewNV: return "PositionPerViewNV";
        case BuiltIn::ViewportMaskPerViewNV: return "ViewportMaskPerViewNV";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* SelectionControlShiftToString(SelectionControlShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case SelectionControlShift::Flatten: return "Flatten";
        case SelectionControlShift::DontFlatten: return "DontFlatten";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* SelectionControlMaskToString(SelectionControlMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case SelectionControlMask::MaskNone: return "None";
        case SelectionControlMask::Flatten: return "Flatten";
        case SelectionControlMask::DontFlatten: return "DontFlatten";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* LoopControlShiftToString(LoopControlShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case LoopControlShift::Unroll: return "Unroll";
        case LoopControlShift::DontUnroll: return "DontUnroll";
        case LoopControlShift::DependencyInfinite: return "DependencyInfinite";
        case LoopControlShift::DependencyLength: return "DependencyLength";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* LoopControlMaskToString(LoopControlMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case LoopControlMask::MaskNone: return "None";
        case LoopControlMask::Unroll: return "Unroll";
        case LoopControlMask::DontUnroll: return "DontUnroll";
        case LoopControlMask::DependencyInfinite: return "DependencyInfinite";
        case LoopControlMask::DependencyLength: return "DependencyLength";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* FunctionControlShiftToString(FunctionControlShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case FunctionControlShift::Inline: return "Inline";
        case FunctionControlShift::DontInline: return "DontInline";
        case FunctionControlShift::Pure: return "Pure";
        case FunctionControlShift::Const: return "Const";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* FunctionControlMaskToString(FunctionControlMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case FunctionControlMask::MaskNone: return "None";
        case FunctionControlMask::Inline: return "Inline";
        case FunctionControlMask::DontInline: return "DontInline";
        case FunctionControlMask::Pure: return "Pure";
        case FunctionControlMask::Const: return "Const";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* MemorySemanticsShiftToString(MemorySemanticsShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case MemorySemanticsShift::Acquire: return "Acquire";
        case MemorySemanticsShift::Release: return "Release";
        case MemorySemanticsShift::AcquireRelease: return "AcquireRelease";
        case MemorySemanticsShift::SequentiallyConsistent: return "SequentiallyConsistent";
        case MemorySemanticsShift::UniformMemory: return "UniformMemory";
        case MemorySemanticsShift::SubgroupMemory: return "SubgroupMemory";
        case MemorySemanticsShift::WorkgroupMemory: return "WorkgroupMemory";
        case MemorySemanticsShift::CrossWorkgroupMemory: return "CrossWorkgroupMemory";
        case MemorySemanticsShift::AtomicCounterMemory: return "AtomicCounterMemory";
        case MemorySemanticsShift::ImageMemory: return "ImageMemory";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* MemorySemanticsMaskToString(MemorySemanticsMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case MemorySemanticsMask::MaskNone: return "None";
        case MemorySemanticsMask::Acquire: return "Acquire";
        case MemorySemanticsMask::Release: return "Release";
        case MemorySemanticsMask::AcquireRelease: return "AcquireRelease";
        case MemorySemanticsMask::SequentiallyConsistent: return "SequentiallyConsistent";
        case MemorySemanticsMask::UniformMemory: return "UniformMemory";
        case MemorySemanticsMask::SubgroupMemory: return "SubgroupMemory";
        case MemorySemanticsMask::WorkgroupMemory: return "WorkgroupMemory";
        case MemorySemanticsMask::CrossWorkgroupMemory: return "CrossWorkgroupMemory";
        case MemorySemanticsMask::AtomicCounterMemory: return "AtomicCounterMemory";
        case MemorySemanticsMask::ImageMemory: return "ImageMemory";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* MemoryAccessShiftToString(MemoryAccessShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case MemoryAccessShift::Volatile: return "Volatile";
        case MemoryAccessShift::Aligned: return "Aligned";
        case MemoryAccessShift::Nontemporal: return "Nontemporal";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* MemoryAccessMaskToString(MemoryAccessMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case MemoryAccessMask::MaskNone: return "None";
        case MemoryAccessMask::Volatile: return "Volatile";
        case MemoryAccessMask::Aligned: return "Aligned";
        case MemoryAccessMask::Nontemporal: return "Nontemporal";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* ScopeToString(Scope e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case Scope::CrossDevice: return "CrossDevice";
        case Scope::Device: return "Device";
        case Scope::Workgroup: return "Workgroup";
        case Scope::Subgroup: return "Subgroup";
        case Scope::Invocation: return "Invocation";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* GroupOperationToString(GroupOperation e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case GroupOperation::Reduce: return "Reduce";
        case GroupOperation::InclusiveScan: return "InclusiveScan";
        case GroupOperation::ExclusiveScan: return "ExclusiveScan";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* KernelEnqueueFlagsToString(KernelEnqueueFlags e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case KernelEnqueueFlags::NoWait: return "NoWait";
        case KernelEnqueueFlags::WaitKernel: return "WaitKernel";
        case KernelEnqueueFlags::WaitWorkGroup: return "WaitWorkGroup";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* KernelProfilingInfoShiftToString(KernelProfilingInfoShift e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case KernelProfilingInfoShift::CmdExecTime: return "CmdExecTime";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* KernelProfilingInfoMaskToString(KernelProfilingInfoMask e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case KernelProfilingInfoMask::MaskNone: return "None";
        case KernelProfilingInfoMask::CmdExecTime: return "CmdExecTime";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* CapabilityToString(Capability e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case Capability::Matrix: return "Matrix";
        case Capability::Shader: return "Shader";
        case Capability::Geometry: return "Geometry";
        case Capability::Tessellation: return "Tessellation";
        case Capability::Addresses: return "Addresses";
        case Capability::Linkage: return "Linkage";
        case Capability::Kernel: return "Kernel";
        case Capability::Vector16: return "Vector16";
        case Capability::Float16Buffer: return "Float16Buffer";
        case Capability::Float16: return "Float16";
        case Capability::Float64: return "Float64";
        case Capability::Int64: return "Int64";
        case Capability::Int64Atomics: return "Int64Atomics";
        case Capability::ImageBasic: return "ImageBasic";
        case Capability::ImageReadWrite: return "ImageReadWrite";
        case Capability::ImageMipmap: return "ImageMipmap";
        case Capability::Pipes: return "Pipes";
        case Capability::Groups: return "Groups";
        case Capability::DeviceEnqueue: return "DeviceEnqueue";
        case Capability::LiteralSampler: return "LiteralSampler";
        case Capability::AtomicStorage: return "AtomicStorage";
        case Capability::Int16: return "Int16";
        case Capability::TessellationPointSize: return "TessellationPointSize";
        case Capability::GeometryPointSize: return "GeometryPointSize";
        case Capability::ImageGatherExtended: return "ImageGatherExtended";
        case Capability::StorageImageMultisample: return "StorageImageMultisample";
        case Capability::UniformBufferArrayDynamicIndexing: return "UniformBufferArrayDynamicIndexing";
        case Capability::SampledImageArrayDynamicIndexing: return "SampledImageArrayDynamicIndexing";
        case Capability::StorageBufferArrayDynamicIndexing: return "StorageBufferArrayDynamicIndexing";
        case Capability::StorageImageArrayDynamicIndexing: return "StorageImageArrayDynamicIndexing";
        case Capability::ClipDistance: return "ClipDistance";
        case Capability::CullDistance: return "CullDistance";
        case Capability::ImageCubeArray: return "ImageCubeArray";
        case Capability::SampleRateShading: return "SampleRateShading";
        case Capability::ImageRect: return "ImageRect";
        case Capability::SampledRect: return "SampledRect";
        case Capability::GenericPointer: return "GenericPointer";
        case Capability::Int8: return "Int8";
        case Capability::InputAttachment: return "InputAttachment";
        case Capability::SparseResidency: return "SparseResidency";
        case Capability::MinLod: return "MinLod";
        case Capability::Sampled1D: return "Sampled1D";
        case Capability::Image1D: return "Image1D";
        case Capability::SampledCubeArray: return "SampledCubeArray";
        case Capability::SampledBuffer: return "SampledBuffer";
        case Capability::ImageBuffer: return "ImageBuffer";
        case Capability::ImageMSArray: return "ImageMSArray";
        case Capability::StorageImageExtendedFormats: return "StorageImageExtendedFormats";
        case Capability::ImageQuery: return "ImageQuery";
        case Capability::DerivativeControl: return "DerivativeControl";
        case Capability::InterpolationFunction: return "InterpolationFunction";
        case Capability::TransformFeedback: return "TransformFeedback";
        case Capability::GeometryStreams: return "GeometryStreams";
        case Capability::StorageImageReadWithoutFormat: return "StorageImageReadWithoutFormat";
        case Capability::StorageImageWriteWithoutFormat: return "StorageImageWriteWithoutFormat";
        case Capability::MultiViewport: return "MultiViewport";
        case Capability::SubgroupDispatch: return "SubgroupDispatch";
        case Capability::NamedBarrier: return "NamedBarrier";
        case Capability::PipeStorage: return "PipeStorage";
        case Capability::SubgroupBallotKHR: return "SubgroupBallotKHR";
        case Capability::DrawParameters: return "DrawParameters";
        case Capability::SubgroupVoteKHR: return "SubgroupVoteKHR";
        case Capability::StorageBuffer16BitAccess: return "StorageBuffer16BitAccess";
        //case Capability::StorageUniformBufferBlock16: return "StorageUniformBufferBlock16";
        case Capability::StorageUniform16: return "StorageUniform16";
        //case Capability::UniformAndStorageBuffer16BitAccess: return "UniformAndStorageBuffer16BitAccess";
        case Capability::StoragePushConstant16: return "StoragePushConstant16";
        case Capability::StorageInputOutput16: return "StorageInputOutput16";
        case Capability::DeviceGroup: return "DeviceGroup";
        case Capability::MultiView: return "MultiView";
        case Capability::VariablePointersStorageBuffer: return "VariablePointersStorageBuffer";
        case Capability::VariablePointers: return "VariablePointers";
        case Capability::SampleMaskOverrideCoverageNV: return "SampleMaskOverrideCoverageNV";
        case Capability::GeometryShaderPassthroughNV: return "GeometryShaderPassthroughNV";
        case Capability::ShaderViewportIndexLayerNV: return "ShaderViewportIndexLayerNV";
        case Capability::ShaderViewportMaskNV: return "ShaderViewportMaskNV";
        case Capability::ShaderStereoViewNV: return "ShaderStereoViewNV";
        case Capability::PerViewAttributesNV: return "PerViewAttributesNV";
        default: return "";
    }
}
#endif

SPIRV_DEF const char* OpToString(Op e)
#ifndef SPIRV_STRINGS_IMPLEMENT
;
#else
{
    switch(e)
    {
        case Op::OpNop: return "OpNop";
        case Op::OpUndef: return "OpUndef";
        case Op::OpSourceContinued: return "OpSourceContinued";
        case Op::OpSource: return "OpSource";
        case Op::OpSourceExtension: return "OpSourceExtension";
        case Op::OpName: return "OpName";
        case Op::OpMemberName: return "OpMemberName";
        case Op::OpString: return "OpString";
        case Op::OpLine: return "OpLine";
        case Op::OpExtension: return "OpExtension";
        case Op::OpExtInstImport: return "OpExtInstImport";
        case Op::OpExtInst: return "OpExtInst";
        case Op::OpMemoryModel: return "OpMemoryModel";
        case Op::OpEntryPoint: return "OpEntryPoint";
        case Op::OpExecutionMode: return "OpExecutionMode";
        case Op::OpCapability: return "OpCapability";
        case Op::OpTypeVoid: return "OpTypeVoid";
        case Op::OpTypeBool: return "OpTypeBool";
        case Op::OpTypeInt: return "OpTypeInt";
        case Op::OpTypeFloat: return "OpTypeFloat";
        case Op::OpTypeVector: return "OpTypeVector";
        case Op::OpTypeMatrix: return "OpTypeMatrix";
        case Op::OpTypeImage: return "OpTypeImage";
        case Op::OpTypeSampler: return "OpTypeSampler";
        case Op::OpTypeSampledImage: return "OpTypeSampledImage";
        case Op::OpTypeArray: return "OpTypeArray";
        case Op::OpTypeRuntimeArray: return "OpTypeRuntimeArray";
        case Op::OpTypeStruct: return "OpTypeStruct";
        case Op::OpTypeOpaque: return "OpTypeOpaque";
        case Op::OpTypePointer: return "OpTypePointer";
        case Op::OpTypeFunction: return "OpTypeFunction";
        case Op::OpTypeEvent: return "OpTypeEvent";
        case Op::OpTypeDeviceEvent: return "OpTypeDeviceEvent";
        case Op::OpTypeReserveId: return "OpTypeReserveId";
        case Op::OpTypeQueue: return "OpTypeQueue";
        case Op::OpTypePipe: return "OpTypePipe";
        case Op::OpTypeForwardPointer: return "OpTypeForwardPointer";
        case Op::OpConstantTrue: return "OpConstantTrue";
        case Op::OpConstantFalse: return "OpConstantFalse";
        case Op::OpConstant: return "OpConstant";
        case Op::OpConstantComposite: return "OpConstantComposite";
        case Op::OpConstantSampler: return "OpConstantSampler";
        case Op::OpConstantNull: return "OpConstantNull";
        case Op::OpSpecConstantTrue: return "OpSpecConstantTrue";
        case Op::OpSpecConstantFalse: return "OpSpecConstantFalse";
        case Op::OpSpecConstant: return "OpSpecConstant";
        case Op::OpSpecConstantComposite: return "OpSpecConstantComposite";
        case Op::OpSpecConstantOp: return "OpSpecConstantOp";
        case Op::OpFunction: return "OpFunction";
        case Op::OpFunctionParameter: return "OpFunctionParameter";
        case Op::OpFunctionEnd: return "OpFunctionEnd";
        case Op::OpFunctionCall: return "OpFunctionCall";
        case Op::OpVariable: return "OpVariable";
        case Op::OpImageTexelPointer: return "OpImageTexelPointer";
        case Op::OpLoad: return "OpLoad";
        case Op::OpStore: return "OpStore";
        case Op::OpCopyMemory: return "OpCopyMemory";
        case Op::OpCopyMemorySized: return "OpCopyMemorySized";
        case Op::OpAccessChain: return "OpAccessChain";
        case Op::OpInBoundsAccessChain: return "OpInBoundsAccessChain";
        case Op::OpPtrAccessChain: return "OpPtrAccessChain";
        case Op::OpArrayLength: return "OpArrayLength";
        case Op::OpGenericPtrMemSemantics: return "OpGenericPtrMemSemantics";
        case Op::OpInBoundsPtrAccessChain: return "OpInBoundsPtrAccessChain";
        case Op::OpDecorate: return "OpDecorate";
        case Op::OpMemberDecorate: return "OpMemberDecorate";
        case Op::OpDecorationGroup: return "OpDecorationGroup";
        case Op::OpGroupDecorate: return "OpGroupDecorate";
        case Op::OpGroupMemberDecorate: return "OpGroupMemberDecorate";
        case Op::OpVectorExtractDynamic: return "OpVectorExtractDynamic";
        case Op::OpVectorInsertDynamic: return "OpVectorInsertDynamic";
        case Op::OpVectorShuffle: return "OpVectorShuffle";
        case Op::OpCompositeConstruct: return "OpCompositeConstruct";
        case Op::OpCompositeExtract: return "OpCompositeExtract";
        case Op::OpCompositeInsert: return "OpCompositeInsert";
        case Op::OpCopyObject: return "OpCopyObject";
        case Op::OpTranspose: return "OpTranspose";
        case Op::OpSampledImage: return "OpSampledImage";
        case Op::OpImageSampleImplicitLod: return "OpImageSampleImplicitLod";
        case Op::OpImageSampleExplicitLod: return "OpImageSampleExplicitLod";
        case Op::OpImageSampleDrefImplicitLod: return "OpImageSampleDrefImplicitLod";
        case Op::OpImageSampleDrefExplicitLod: return "OpImageSampleDrefExplicitLod";
        case Op::OpImageSampleProjImplicitLod: return "OpImageSampleProjImplicitLod";
        case Op::OpImageSampleProjExplicitLod: return "OpImageSampleProjExplicitLod";
        case Op::OpImageSampleProjDrefImplicitLod: return "OpImageSampleProjDrefImplicitLod";
        case Op::OpImageSampleProjDrefExplicitLod: return "OpImageSampleProjDrefExplicitLod";
        case Op::OpImageFetch: return "OpImageFetch";
        case Op::OpImageGather: return "OpImageGather";
        case Op::OpImageDrefGather: return "OpImageDrefGather";
        case Op::OpImageRead: return "OpImageRead";
        case Op::OpImageWrite: return "OpImageWrite";
        case Op::OpImage: return "OpImage";
        case Op::OpImageQueryFormat: return "OpImageQueryFormat";
        case Op::OpImageQueryOrder: return "OpImageQueryOrder";
        case Op::OpImageQuerySizeLod: return "OpImageQuerySizeLod";
        case Op::OpImageQuerySize: return "OpImageQuerySize";
        case Op::OpImageQueryLod: return "OpImageQueryLod";
        case Op::OpImageQueryLevels: return "OpImageQueryLevels";
        case Op::OpImageQuerySamples: return "OpImageQuerySamples";
        case Op::OpConvertFToU: return "OpConvertFToU";
        case Op::OpConvertFToS: return "OpConvertFToS";
        case Op::OpConvertSToF: return "OpConvertSToF";
        case Op::OpConvertUToF: return "OpConvertUToF";
        case Op::OpUConvert: return "OpUConvert";
        case Op::OpSConvert: return "OpSConvert";
        case Op::OpFConvert: return "OpFConvert";
        case Op::OpQuantizeToF16: return "OpQuantizeToF16";
        case Op::OpConvertPtrToU: return "OpConvertPtrToU";
        case Op::OpSatConvertSToU: return "OpSatConvertSToU";
        case Op::OpSatConvertUToS: return "OpSatConvertUToS";
        case Op::OpConvertUToPtr: return "OpConvertUToPtr";
        case Op::OpPtrCastToGeneric: return "OpPtrCastToGeneric";
        case Op::OpGenericCastToPtr: return "OpGenericCastToPtr";
        case Op::OpGenericCastToPtrExplicit: return "OpGenericCastToPtrExplicit";
        case Op::OpBitcast: return "OpBitcast";
        case Op::OpSNegate: return "OpSNegate";
        case Op::OpFNegate: return "OpFNegate";
        case Op::OpIAdd: return "OpIAdd";
        case Op::OpFAdd: return "OpFAdd";
        case Op::OpISub: return "OpISub";
        case Op::OpFSub: return "OpFSub";
        case Op::OpIMul: return "OpIMul";
        case Op::OpFMul: return "OpFMul";
        case Op::OpUDiv: return "OpUDiv";
        case Op::OpSDiv: return "OpSDiv";
        case Op::OpFDiv: return "OpFDiv";
        case Op::OpUMod: return "OpUMod";
        case Op::OpSRem: return "OpSRem";
        case Op::OpSMod: return "OpSMod";
        case Op::OpFRem: return "OpFRem";
        case Op::OpFMod: return "OpFMod";
        case Op::OpVectorTimesScalar: return "OpVectorTimesScalar";
        case Op::OpMatrixTimesScalar: return "OpMatrixTimesScalar";
        case Op::OpVectorTimesMatrix: return "OpVectorTimesMatrix";
        case Op::OpMatrixTimesVector: return "OpMatrixTimesVector";
        case Op::OpMatrixTimesMatrix: return "OpMatrixTimesMatrix";
        case Op::OpOuterProduct: return "OpOuterProduct";
        case Op::OpDot: return "OpDot";
        case Op::OpIAddCarry: return "OpIAddCarry";
        case Op::OpISubBorrow: return "OpISubBorrow";
        case Op::OpUMulExtended: return "OpUMulExtended";
        case Op::OpSMulExtended: return "OpSMulExtended";
        case Op::OpAny: return "OpAny";
        case Op::OpAll: return "OpAll";
        case Op::OpIsNan: return "OpIsNan";
        case Op::OpIsInf: return "OpIsInf";
        case Op::OpIsFinite: return "OpIsFinite";
        case Op::OpIsNormal: return "OpIsNormal";
        case Op::OpSignBitSet: return "OpSignBitSet";
        case Op::OpLessOrGreater: return "OpLessOrGreater";
        case Op::OpOrdered: return "OpOrdered";
        case Op::OpUnordered: return "OpUnordered";
        case Op::OpLogicalEqual: return "OpLogicalEqual";
        case Op::OpLogicalNotEqual: return "OpLogicalNotEqual";
        case Op::OpLogicalOr: return "OpLogicalOr";
        case Op::OpLogicalAnd: return "OpLogicalAnd";
        case Op::OpLogicalNot: return "OpLogicalNot";
        case Op::OpSelect: return "OpSelect";
        case Op::OpIEqual: return "OpIEqual";
        case Op::OpINotEqual: return "OpINotEqual";
        case Op::OpUGreaterThan: return "OpUGreaterThan";
        case Op::OpSGreaterThan: return "OpSGreaterThan";
        case Op::OpUGreaterThanEqual: return "OpUGreaterThanEqual";
        case Op::OpSGreaterThanEqual: return "OpSGreaterThanEqual";
        case Op::OpULessThan: return "OpULessThan";
        case Op::OpSLessThan: return "OpSLessThan";
        case Op::OpULessThanEqual: return "OpULessThanEqual";
        case Op::OpSLessThanEqual: return "OpSLessThanEqual";
        case Op::OpFOrdEqual: return "OpFOrdEqual";
        case Op::OpFUnordEqual: return "OpFUnordEqual";
        case Op::OpFOrdNotEqual: return "OpFOrdNotEqual";
        case Op::OpFUnordNotEqual: return "OpFUnordNotEqual";
        case Op::OpFOrdLessThan: return "OpFOrdLessThan";
        case Op::OpFUnordLessThan: return "OpFUnordLessThan";
        case Op::OpFOrdGreaterThan: return "OpFOrdGreaterThan";
        case Op::OpFUnordGreaterThan: return "OpFUnordGreaterThan";
        case Op::OpFOrdLessThanEqual: return "OpFOrdLessThanEqual";
        case Op::OpFUnordLessThanEqual: return "OpFUnordLessThanEqual";
        case Op::OpFOrdGreaterThanEqual: return "OpFOrdGreaterThanEqual";
        case Op::OpFUnordGreaterThanEqual: return "OpFUnordGreaterThanEqual";
        case Op::OpShiftRightLogical: return "OpShiftRightLogical";
        case Op::OpShiftRightArithmetic: return "OpShiftRightArithmetic";
        case Op::OpShiftLeftLogical: return "OpShiftLeftLogical";
        case Op::OpBitwiseOr: return "OpBitwiseOr";
        case Op::OpBitwiseXor: return "OpBitwiseXor";
        case Op::OpBitwiseAnd: return "OpBitwiseAnd";
        case Op::OpNot: return "OpNot";
        case Op::OpBitFieldInsert: return "OpBitFieldInsert";
        case Op::OpBitFieldSExtract: return "OpBitFieldSExtract";
        case Op::OpBitFieldUExtract: return "OpBitFieldUExtract";
        case Op::OpBitReverse: return "OpBitReverse";
        case Op::OpBitCount: return "OpBitCount";
        case Op::OpDPdx: return "OpDPdx";
        case Op::OpDPdy: return "OpDPdy";
        case Op::OpFwidth: return "OpFwidth";
        case Op::OpDPdxFine: return "OpDPdxFine";
        case Op::OpDPdyFine: return "OpDPdyFine";
        case Op::OpFwidthFine: return "OpFwidthFine";
        case Op::OpDPdxCoarse: return "OpDPdxCoarse";
        case Op::OpDPdyCoarse: return "OpDPdyCoarse";
        case Op::OpFwidthCoarse: return "OpFwidthCoarse";
        case Op::OpEmitVertex: return "OpEmitVertex";
        case Op::OpEndPrimitive: return "OpEndPrimitive";
        case Op::OpEmitStreamVertex: return "OpEmitStreamVertex";
        case Op::OpEndStreamPrimitive: return "OpEndStreamPrimitive";
        case Op::OpControlBarrier: return "OpControlBarrier";
        case Op::OpMemoryBarrier: return "OpMemoryBarrier";
        case Op::OpAtomicLoad: return "OpAtomicLoad";
        case Op::OpAtomicStore: return "OpAtomicStore";
        case Op::OpAtomicExchange: return "OpAtomicExchange";
        case Op::OpAtomicCompareExchange: return "OpAtomicCompareExchange";
        case Op::OpAtomicCompareExchangeWeak: return "OpAtomicCompareExchangeWeak";
        case Op::OpAtomicIIncrement: return "OpAtomicIIncrement";
        case Op::OpAtomicIDecrement: return "OpAtomicIDecrement";
        case Op::OpAtomicIAdd: return "OpAtomicIAdd";
        case Op::OpAtomicISub: return "OpAtomicISub";
        case Op::OpAtomicSMin: return "OpAtomicSMin";
        case Op::OpAtomicUMin: return "OpAtomicUMin";
        case Op::OpAtomicSMax: return "OpAtomicSMax";
        case Op::OpAtomicUMax: return "OpAtomicUMax";
        case Op::OpAtomicAnd: return "OpAtomicAnd";
        case Op::OpAtomicOr: return "OpAtomicOr";
        case Op::OpAtomicXor: return "OpAtomicXor";
        case Op::OpPhi: return "OpPhi";
        case Op::OpLoopMerge: return "OpLoopMerge";
        case Op::OpSelectionMerge: return "OpSelectionMerge";
        case Op::OpLabel: return "OpLabel";
        case Op::OpBranch: return "OpBranch";
        case Op::OpBranchConditional: return "OpBranchConditional";
        case Op::OpSwitch: return "OpSwitch";
        case Op::OpKill: return "OpKill";
        case Op::OpReturn: return "OpReturn";
        case Op::OpReturnValue: return "OpReturnValue";
        case Op::OpUnreachable: return "OpUnreachable";
        case Op::OpLifetimeStart: return "OpLifetimeStart";
        case Op::OpLifetimeStop: return "OpLifetimeStop";
        case Op::OpGroupAsyncCopy: return "OpGroupAsyncCopy";
        case Op::OpGroupWaitEvents: return "OpGroupWaitEvents";
        case Op::OpGroupAll: return "OpGroupAll";
        case Op::OpGroupAny: return "OpGroupAny";
        case Op::OpGroupBroadcast: return "OpGroupBroadcast";
        case Op::OpGroupIAdd: return "OpGroupIAdd";
        case Op::OpGroupFAdd: return "OpGroupFAdd";
        case Op::OpGroupFMin: return "OpGroupFMin";
        case Op::OpGroupUMin: return "OpGroupUMin";
        case Op::OpGroupSMin: return "OpGroupSMin";
        case Op::OpGroupFMax: return "OpGroupFMax";
        case Op::OpGroupUMax: return "OpGroupUMax";
        case Op::OpGroupSMax: return "OpGroupSMax";
        case Op::OpReadPipe: return "OpReadPipe";
        case Op::OpWritePipe: return "OpWritePipe";
        case Op::OpReservedReadPipe: return "OpReservedReadPipe";
        case Op::OpReservedWritePipe: return "OpReservedWritePipe";
        case Op::OpReserveReadPipePackets: return "OpReserveReadPipePackets";
        case Op::OpReserveWritePipePackets: return "OpReserveWritePipePackets";
        case Op::OpCommitReadPipe: return "OpCommitReadPipe";
        case Op::OpCommitWritePipe: return "OpCommitWritePipe";
        case Op::OpIsValidReserveId: return "OpIsValidReserveId";
        case Op::OpGetNumPipePackets: return "OpGetNumPipePackets";
        case Op::OpGetMaxPipePackets: return "OpGetMaxPipePackets";
        case Op::OpGroupReserveReadPipePackets: return "OpGroupReserveReadPipePackets";
        case Op::OpGroupReserveWritePipePackets: return "OpGroupReserveWritePipePackets";
        case Op::OpGroupCommitReadPipe: return "OpGroupCommitReadPipe";
        case Op::OpGroupCommitWritePipe: return "OpGroupCommitWritePipe";
        case Op::OpEnqueueMarker: return "OpEnqueueMarker";
        case Op::OpEnqueueKernel: return "OpEnqueueKernel";
        case Op::OpGetKernelNDrangeSubGroupCount: return "OpGetKernelNDrangeSubGroupCount";
        case Op::OpGetKernelNDrangeMaxSubGroupSize: return "OpGetKernelNDrangeMaxSubGroupSize";
        case Op::OpGetKernelWorkGroupSize: return "OpGetKernelWorkGroupSize";
        case Op::OpGetKernelPreferredWorkGroupSizeMultiple: return "OpGetKernelPreferredWorkGroupSizeMultiple";
        case Op::OpRetainEvent: return "OpRetainEvent";
        case Op::OpReleaseEvent: return "OpReleaseEvent";
        case Op::OpCreateUserEvent: return "OpCreateUserEvent";
        case Op::OpIsValidEvent: return "OpIsValidEvent";
        case Op::OpSetUserEventStatus: return "OpSetUserEventStatus";
        case Op::OpCaptureEventProfilingInfo: return "OpCaptureEventProfilingInfo";
        case Op::OpGetDefaultQueue: return "OpGetDefaultQueue";
        case Op::OpBuildNDRange: return "OpBuildNDRange";
        case Op::OpImageSparseSampleImplicitLod: return "OpImageSparseSampleImplicitLod";
        case Op::OpImageSparseSampleExplicitLod: return "OpImageSparseSampleExplicitLod";
        case Op::OpImageSparseSampleDrefImplicitLod: return "OpImageSparseSampleDrefImplicitLod";
        case Op::OpImageSparseSampleDrefExplicitLod: return "OpImageSparseSampleDrefExplicitLod";
        case Op::OpImageSparseSampleProjImplicitLod: return "OpImageSparseSampleProjImplicitLod";
        case Op::OpImageSparseSampleProjExplicitLod: return "OpImageSparseSampleProjExplicitLod";
        case Op::OpImageSparseSampleProjDrefImplicitLod: return "OpImageSparseSampleProjDrefImplicitLod";
        case Op::OpImageSparseSampleProjDrefExplicitLod: return "OpImageSparseSampleProjDrefExplicitLod";
        case Op::OpImageSparseFetch: return "OpImageSparseFetch";
        case Op::OpImageSparseGather: return "OpImageSparseGather";
        case Op::OpImageSparseDrefGather: return "OpImageSparseDrefGather";
        case Op::OpImageSparseTexelsResident: return "OpImageSparseTexelsResident";
        case Op::OpNoLine: return "OpNoLine";
        case Op::OpAtomicFlagTestAndSet: return "OpAtomicFlagTestAndSet";
        case Op::OpAtomicFlagClear: return "OpAtomicFlagClear";
        case Op::OpImageSparseRead: return "OpImageSparseRead";
        case Op::OpSizeOf: return "OpSizeOf";
        case Op::OpTypePipeStorage: return "OpTypePipeStorage";
        case Op::OpConstantPipeStorage: return "OpConstantPipeStorage";
        case Op::OpCreatePipeFromPipeStorage: return "OpCreatePipeFromPipeStorage";
        case Op::OpGetKernelLocalSizeForSubgroupCount: return "OpGetKernelLocalSizeForSubgroupCount";
        case Op::OpGetKernelMaxNumSubgroups: return "OpGetKernelMaxNumSubgroups";
        case Op::OpTypeNamedBarrier: return "OpTypeNamedBarrier";
        case Op::OpNamedBarrierInitialize: return "OpNamedBarrierInitialize";
        case Op::OpMemoryNamedBarrier: return "OpMemoryNamedBarrier";
        case Op::OpModuleProcessed: return "OpModuleProcessed";
        case Op::OpExecutionModeId: return "OpExecutionModeId";
        case Op::OpDecorateId: return "OpDecorateId";
        case Op::OpSubgroupBallotKHR: return "OpSubgroupBallotKHR";
        case Op::OpSubgroupFirstInvocationKHR: return "OpSubgroupFirstInvocationKHR";
        case Op::OpSubgroupAllKHR: return "OpSubgroupAllKHR";
        case Op::OpSubgroupAnyKHR: return "OpSubgroupAnyKHR";
        case Op::OpSubgroupAllEqualKHR: return "OpSubgroupAllEqualKHR";
        case Op::OpSubgroupReadInvocationKHR: return "OpSubgroupReadInvocationKHR";
        default: return "";
    }
}
#endif

}  // end namespace spv

#endif  // #ifndef spirv_strings_HPP

